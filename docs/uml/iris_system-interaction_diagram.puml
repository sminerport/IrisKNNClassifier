@startuml Iris Classifier System: Class Diagram

title Iris Classifier System: Class Diagram

skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontColor Black

package "UI" {
    class IrisClassifierApp {
        +__init__(root: Tk)
        +create_widgets()
        +populate_entries(values: List[float])
        +generate_case()
        +predict()
        +show_about()
    }
}

package "Model" {
    class IrisModel {
        +__init__(filename: str, num_neighbors: int, n_folds: int, seed_value: int)
        +set_seed()
        +load_data()
        +train_model()
        +predict(inputs: List[float]) : str
        +get_scores() : Tuple[str, List[str]]
    }
}

package "Data Processing" {
    class DataLoader {
        +__init__(filename: str, skip_header: bool)
        +load_data() : List[List[str]]
    }

    class Preprocessor {
        +convert_to_float(dataset: List[List[str]], column: int) : None
        +convert_to_int(dataset: List[List[str]], column: int) : Dict[str, int]
        +normalize_dataset(dataset: List[List[float]], minmax: List[Tuple[float, float]]) : None
        +dataset_minmax(dataset: List[List[float]]) : List[Tuple[float, float]]
    }
}

package "Algorithm" {
    class CrossValidator {
        +__init__(n_folds: int)
        +cross_validation_split(dataset: List[List[Any]]) : List[List[List[Any]]]
        +accuracy_metric(actual: List[Any], predicted: List[Any]) : float
        +evaluate_algorithm(dataset: List[List[Any]], algorithm: Callable, *args) : List[float]
    }

    class KNearestNeighbors {
        +__init__(num_neighbors: int)
        +euclidean_distance(row1: List[float], row2: List[float]) : float
        +get_neighbors(train: List[List[float]], test_row: List[float]) : List[List[float]]
        +predict_classification(train: List[List[float]], test_row: List[float]) : Union[int, str]
        +predict_all(train: List[List[float]], test: List[List[float]]) : List[Union[int, str]]
    }
}

IrisClassifierApp --> IrisModel : uses
IrisModel --> DataLoader : uses
IrisModel --> Preprocessor : uses
IrisModel --> CrossValidator : uses
IrisModel --> KNearestNeighbors : uses

@enduml
